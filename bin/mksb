#!/usr/bin/env python

# Creates a sandbox.

import optparse
import subprocess
import sys
from os.path import join, dirname, abspath, isdir

libdir = abspath(join(dirname(__file__), '../lib/python'))
if not isdir(libdir):
    print >> sys.stderr, "Failed to find library files in: %s" % libdir
    sys.exit(1)
sys.path.append(libdir)

from zenossdev import sandbox

config = sandbox.load_config()

usage = """\
%prog [options] <sandbox_name>

Creates a sandbox for the currently checked out code. Must be run from within
an existing SVN checkout of either core or enterprise.

Examples:
    $ mksb feature_branch
      # Creates a new branch based on 'trunk' named 'feature_branch'.

    $ mksb -b zenoss-4.1.x -s 41_fix
      # Creates a new branch based on 'zenoss-4.1.x' named '41_fix' and switches
      # to it after the branch is created.\
"""
parser = optparse.OptionParser(usage=usage)
parser.add_option('-b', '--branch', dest="branch", default='trunk',
                  help="Source branch (default: 'trunk').")
parser.add_option('-u', '--user', dest='user', default=config.svn_username,
                  help="Create sandbox for user (default '%default').")
parser.add_option('--dry-run', dest='dry_run', action='store_true',
                  help="Try operation but make no changes.")
parser.add_option('-s', '--switch', dest='switch', action='store_true',
                  help="Switch to newly created branch after creating.")

(options, args) = parser.parse_args()
if not args:
    parser.error('Missing branch name')
if len(args) > 1:
    parser.error('Only one branch can be created at a time')
if not options.user:
    parser.error('User must be specified in %s or via the -u/--user option' % 
                 sandbox.CONFIG_FILE)

branch_name = args[0]

try:
    root = sandbox.find_root_checkout()
    src_url = sandbox.find_branch_url(root, options.branch, username=None,
                                      append_zenpacks=False)
    dest_url = sandbox.find_branch_url(root, branch_name, options.user,
                                       guess_branch=False,
                                       append_zenpacks=False)
    cmd = ['svn' , 'cp', src_url, dest_url]
    print ' '.join(cmd)
    if not options.dry_run:
        rc = subprocess.call(cmd)
        if rc != 0:
            sys.exit(rc)

    if options.switch:
        switch_url = dest_url
        if sandbox.is_enterprise(root):
            switch_url += '/zenpacks'
        cmd = ['svn', 'switch', switch_url, root]
        print ' '.join(cmd)
        if not options.dry_run:
            rc = subprocess.call(cmd)
            if rc != 0:
                sys.exit(rc)
except Exception, e:
    print >> sys.stderr, "Failed to create sandbox: %s" % e
    sys.exit(1)
